version: '3'

services:

  nginx-service:
    image: nginx:alpine
    container_name: nginx-container
    ports:
      - '5000:80'
    volumes:
      - './nginx/default.conf:/etc/nginx/conf.d/default.conf'
    networks:
      - node-webapp-network
    depends_on:
      nodeapp1:
        condition: service_healthy
      nodeapp2:
        condition: service_healthy

  nodeapp1:
    container_name: test_concept_1
    # image: node

    # scale: 2

    # restart: always
    stdin_open: true
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - '3000'
    links:
      - mongo
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - node-webapp-network
    # volumes:

    #     - .:/usr/src/app
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 20s
      retries: 3

  nodeapp2:
    container_name: test_concept_2
    # image: node

    # scale: 2

    # restart: always
    stdin_open: true
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - '3000'
    links:
      - mongo
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - node-webapp-network
    # volumes:

    #     - .:/usr/src/app
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 20s
      retries: 3

  mongo:
    container_name: test_concept_1_mongo
    image: mongo:4.4.6
    restart: always
    # environment:

    #     MONGO_INITDB_ROOT_USERNAME: admin

    #     MONGO_INITDB_ROOT_PASSWORD: admin

    #     MONGO_INITDB_DATABASE: admin
    volumes:
      - ./mongo:/data/db
      - ./mongo/auth/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    # volumes:

    #     # - ~/mongo:/data/db

    #     - ./mongo:/data/db

    # ports:

    #     - "27018:27017"
    expose:
      - '27017'
    networks:
      - node-webapp-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 30s
      timeout: 20s
      retries: 3

networks:
  node-webapp-network:
    driver: bridge
